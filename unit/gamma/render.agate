# gamma, GAMes Made with Agate
# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard

import "gamma/math" for Vec2F

foreign class Color {
  construct new(r, g, b, a) foreign
  construct rgba32(value) foreign

  r foreign
  g foreign
  b foreign
  a foreign

  r=(value) foreign
  g=(value) foreign
  b=(value) foreign
  a=(value) foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign
  /(other) foreign

  ==(other) foreign
  !=(other) foreign

  darker(ratio) foreign
  darker() { .darker(0.5) }
  lighter(ratio) foreign
  lighter() { .lighter(0.5) }

  normalize() foreign

  to_s { "(%(.r), %(.g), %(.b), %(.a))" }

  static lerp(color0, color1, ratio) foreign

  static BLACK      { Color.new(0.0, 0.0, 0.0, 1.0) }
  static WHITE      { Color.new(1.0, 1.0, 1.0, 1.0) }

  static RED        { Color.new(1.0, 0.0, 0.0, 1.0) }
  static GREEN      { Color.new(0.0, 1.0, 0.0, 1.0) }
  static BLUE       { Color.new(0.0, 0.0, 1.0, 1.0) }

  static CYAN       { Color.new(0.0, 1.0, 1.0, 1.0) }
  static MAGENTA    { Color.new(1.0, 0.0, 1.0, 1.0) }
  static YELLOW     { Color.new(1.0, 1.0, 0.0, 1.0) }

  static ORANGE     { Color.new(1.0, 0.5, 0.0, 1.0) }
  static ROSE       { Color.new(1.0, 0.0, 0.5, 1.0) }
  static CHARTREUSE { Color.new(0.5, 1.0, 0.0, 1.0) }
  static SPRING     { Color.new(0.0, 1.0, 0.5, 1.0) }
  static VIOLET     { Color.new(0.5, 0.0, 1.0, 1.0) }
  static AZURE      { Color.new(0.0, 0.5, 1.0, 1.0) }

  static TRANSPARENT { Color.new(0.0, 0.0, 0.0, 0.0) }
  static OPAQUE(val) { Color.new(1.0, 1.0, 1.0, val) }
  static GRAY(val)  { Color.new(val, val, val, 1.0) }

  static (r, g, b) { Color.new(r, g, b, 1.0) }
  static (r, g, b, a) { Color.new(r, g, b, a) }
}

foreign class Camera {
  construct new_extend(center, size) foreign
  construct new_fill(center, size) foreign
  construct new_fit(center, size) foreign
  construct new_locked(center, size) foreign
  construct new_screen(center, size) foreign
  construct new_stretch(center, size) foreign

  size foreign
  size=(value) foreign

  center foreign
  center=(value) foreign
  move(offset) foreign
  move(x, y) foreign

  rotation foreign
  rotation=(value) foreign
  rotate(angle) foreign

  zoom(factor) foreign
  zoom(factor, fixed) foreign

  viewport foreign
  viewport=(rect) foreign
}

class Origin {
  static TOP_LEFT       { Vec2F.new(0.0, 0.0) }
  static TOP_CENTER     { Vec2F.new(0.5, 0.0) }
  static TOP_RIGHT      { Vec2F.new(1.0, 0.0) }
  static CENTER_LEFT    { Vec2F.new(0.0, 0.5) }
  static CENTER         { Vec2F.new(0.5, 0.5) }
  static CENTER_RIGHT   { Vec2F.new(1.0, 0.5) }
  static BOTTOM_LEFT    { Vec2F.new(0.0, 1.0) }
  static BOTTOM_CENTER  { Vec2F.new(0.5, 1.0) }
  static BOTTOM_RIGHT   { Vec2F.new(1.0, 1.0) }
}

foreign class Transform {
  construct new() foreign
  construct new(position) foreign
  construct new(position, origin) foreign
  construct new(position, origin, angle) foreign

  origin foreign
  origin=(value) foreign

  position foreign
  position=(value) foreign
  move(offset) foreign

  rotation foreign
  rotation=(value) foreign
  rotate(angle) foreign

  scale foreign
  scale=(value) foreign
  scale(factor) foreign

  static (position) { Transform.new(position) }
  static (position, origin) { Transform.new(position, origin) }
  static (position, origin, angle) { Transform.new(position, origin, angle) }
}

foreign class Renderer {
  construct new(window) foreign
  clear() foreign
  clear(color) foreign
  display() foreign

  camera=(value) foreign

  world_to_device(position) foreign
  world_to_device(position, camera) foreign

  device_to_world(coordinates) foreign
  device_to_world(coordinates, camera) foreign

  draw_object(object, transform) foreign

  draw(object, position) { .draw_object(object, Transform(position)) }
  draw(object, position, origin) { .draw_object(object, Transform(position, origin)) }
  draw(object, position, origin, angle) { .draw_object(object, Transform(position, origin, angle)) }

  draw_rect(rect, color) foreign
#   draw_rect(rect, color, outline_thickness, outline_color) foreign
#
#   draw_circle(center, radius, color) foreign
#   draw_circle(center, radius, color, outline_thickness, outline_color) foreign
#
#   draw_polygon(points, color) foreign
#   draw_polygon(points, color, outline_thickness, outline_color) foreign
#
#   draw_line(p0, p1, color, width) foreign
#
#   draw_loop(points, color, width) foreign
#   draw_chain(points, color, width) foreign
#
#   draw_spline_loop(points, color, width, type) foreign
#   draw_spline_chain(points, color, width, type) foreign

  vsynced foreign
  vsynced=(value) foreign
}
