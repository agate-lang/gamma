# gamma, GAMes Made with Agate
# SPDX-License-Identifier: MIT
# Copyright (c) 2022 Julien Bernard

foreign class Vec2F {
  construct zero() foreign
  construct new(x, y) foreign
  construct unit(angle) foreign

  x foreign
  y foreign
  x=(value) foreign
  y=(value) foreign

  + foreign
  - foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign
  /(other) foreign

  ==(other) foreign
  !=(other) foreign

  static (x, y) { Vec2F.new(x, y) }
}

foreign class Vec2I {
  construct zero() foreign
  construct new(x, y) foreign

  x foreign
  y foreign
  x=(value) foreign
  y=(value) foreign

  + foreign
  - foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign
  /(other) foreign

  ==(other) foreign
  !=(other) foreign

  static (x, y) { Vec2I.new(x, y) }
}

foreign class Color {
  construct new(r, g, b, a) foreign
  construct rgba32(value) foreign

  r foreign
  g foreign
  b foreign
  a foreign

  r=(value) foreign
  g=(value) foreign
  b=(value) foreign
  a=(value) foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign
  /(other) foreign

  ==(other) foreign
  !=(other) foreign

  darker(ratio) foreign
  darker() { .darker(0.5) }
  lighter(ratio) foreign
  lighter() { .lighter(0.5) }

  normalize() foreign

  to_s { "(%(.r), %(.g), %(.b), %(.a))" }

  static lerp(color0, color1, ratio) foreign

  static BLACK      { Color.new(0.0, 0.0, 0.0, 1.0) }
  static WHITE      { Color.new(1.0, 1.0, 1.0, 1.0) }

  static RED        { Color.new(1.0, 0.0, 0.0, 1.0) }
  static GREEN      { Color.new(0.0, 1.0, 0.0, 1.0) }
  static BLUE       { Color.new(0.0, 0.0, 1.0, 1.0) }

  static CYAN       { Color.new(0.0, 1.0, 1.0, 1.0) }
  static MAGENTA    { Color.new(1.0, 0.0, 1.0, 1.0) }
  static YELLOW     { Color.new(1.0, 1.0, 0.0, 1.0) }

  static ORANGE     { Color.new(1.0, 0.5, 0.0, 1.0) }
  static ROSE       { Color.new(1.0, 0.0, 0.5, 1.0) }
  static CHARTREUSE { Color.new(0.5, 1.0, 0.0, 1.0) }
  static SPRING     { Color.new(0.0, 1.0, 0.5, 1.0) }
  static VIOLET     { Color.new(0.5, 0.0, 1.0, 1.0) }
  static AZURE      { Color.new(0.0, 0.5, 1.0, 1.0) }

  static TRANSPARENT { Color.new(0.0, 0.0, 0.0, 0.0) }
  static OPAQUE(val) { Color.new(1.0, 1.0, 1.0, val) }
  static GRAY(val)  { Color.new(val, val, val, 1.0) }

  static (r, g, b) { Color.new(r, g, b, 1.0) }
  static (r, g, b, a) { Color.new(r, g, b, a) }
}

foreign class RectF {
  construct new(x, y, w, h) foreign
  construct new(position, size) foreign
  construct new(size) foreign

  x foreign
  y foreign
  w foreign
  h foreign

  x=(value) foreign
  y=(value) foreign
  w=(value) foreign
  h=(value) foreign

  position foreign
  size foreign

  position=(value) foreign
  size=(value) foreign

  contains(other) foreign
  intersects(other) foreign

  static (x, y, w, h) { RectF.new(x, y, w, h) }
  static (w, h) { RectF.new(0.0, 0.0, w, h) }
}

foreign class RectI {
  construct new(x, y, w, h) foreign
  construct new(position, size) foreign
  construct new(size) foreign

  x foreign
  y foreign
  w foreign
  h foreign

  x=(value) foreign
  y=(value) foreign
  w=(value) foreign
  h=(value) foreign

  position foreign
  size foreign

#   top_left foreign
#   top_center foreign
#   top_right foreign
#   center_left foreign
#   center foreign
#   center_right foreign
#   bottom_left foreign
#   bottom_center foreign
#   bottom_right foreign

#   contains(x, y) foreign
  contains(other) foreign

  intersects(other) foreign

  static (x, y, w, h) { RectI.new(x, y, w, h) }
  static (w, h) { RectI.new(0.0, 0.0, w, h) }
}

foreign class Mat3F {
  construct identity() foreign
  construct translation(tx, ty) foreign
  construct rotation(angle) foreign
  construct rotation(angle, center) { .rotation(angle, center.x, center.y) }
  construct rotation(angle, cx, cy) foreign
  construct scale(sx, sy) foreign

  [row,col] foreign

  +(other) foreign
  -(other) foreign
  *(other) foreign

  transpose() foreign
  invert() foreign

  transform_point(x, y) foreign
  transform_point(p) { .transform_point(p.x, p.y) }
  transform_vector(x, y) foreign
  transform_vector(v) { .transform_vector(v.x, v.y) }
}
